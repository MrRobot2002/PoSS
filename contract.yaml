openapi: 3.0.0
info:
  version: '1'
  title: POSS API
servers:
  - url: https://api.example.com/v1
security:
  - BearerAuth: []
paths:

  /auth/login:
    post:
      tags:
        - Auth
      summary: User login
      description: Authenticates the user (tenant/manager) and issues a JWT token.
      operationId: loginUser
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginCredentials'
      responses:
        '200':
          description: Successfully logged in, JWT token issued
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionToken'
        '401':
          description: Authentication failed

  /auth/manager-initial-code:
    post:
      tags:
        - Auth
      summary: Initial code creation for manager
      description: Allows the manager to create a unique code granting managerial permissions.
      operationId: createManagerInitialCode
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginCredentials'
      responses:
        '200':
          description: Managerial code created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
        '401':
          description: Unauthorized or invalid credentials

  /auth/code-login:
    post:
      tags:
        - Auth
      summary: Code-based login
      description: Logs in a user by their unique code and issues a role-specific JWT token.
      operationId: loginWithCode
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CodeCredentials'
      responses:
        '200':
          description: Successfully logged in with code, role-specific JWT token issued
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionToken'
        '401':
          description: Unauthorized or invalid code

  /auth/logout-role:
    post:
      tags:
        - Auth
      summary: Logout from role and return to tenant session
      description: Logs out the user from their role-specific session and returns the original tenant session token.
      operationId: logoutFromRole
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roleToken:
                  type: string
      responses:
        '200':
          description: Successfully logged out from role, tenant token returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  tenantToken:
                    type: string
        '401':
          description: Unauthorized or invalid role token

  /auth/code/generate:
    post:
      tags:
        - Auth
      summary: Generate a new access code
      description: Generates a new access code for a user and provides the role associated with this code.
      operationId: generateCode
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tenantId:
                  type: integer
                  format: int64
                role:
                  type: string
                  description: The role for which the code is being generated.
      responses:
        '200':
          description: Access code and role generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkerCodeResponse'
        '401':
          description: Unauthorized or invalid user ID

  /auth/logout:
    post:
      tags:
        - Auth
      summary: User logout
      description: Logs out the user and invalidates their session token.
      operationId: logoutUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionToken'
      responses:
        '204':
          description: Successfully logged out


  /employees:
    post:
      tags:
        - Employees
      summary: Register new employee
      description: Registers a new employee to the POS system.
      operationId: registerEmployee
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
      responses:
        '201':
          description: Employee registered
        '400':
          description: Invalid input

  /employees/{id}:
    get:
      tags:
        - Employees
      summary: Retrieve a specific employee
      description: Retrieves details of a specific employee by ID.
      operationId: getEmployee
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Employee details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '404':
          description: Employee not found
    put:
      tags:
        - Employees
      summary: Update a specific employee's role
      description: Updates the role of a specific employee. Restricted to managers and system administrators.
      operationId: updateEmployeeRole
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeRoleUpdate'
      responses:
        '200':
          description: Employee role updated
        '400':
          description: Invalid input
        '404':
          description: Employee not found
    delete:
      tags:
        - Employees
      summary: Delete a specific employee
      description: Deletes a specific employee from the system.
      operationId: deleteEmployee
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Employee successfully deleted
        '404':
          description: Employee not found

  /customers:
    post:
      tags:
        - Customers
      summary: Create a new customer
      description: Creates a new customer in the POS system.
      operationId: createCustomer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomer'
      responses:
        '201':
          description: Customer created successfully
        '400':
          description: Invalid input

    get:
      tags:
        - Customers
      summary: List all customers
      description: Retrieves a list of all customers in the POS system.
      operationId: listCustomers
      responses:
        '200':
          description: A list of customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'

  /customers/{Id}:
    get:
      tags:
        - Customers
      summary: Retrieve details of a specific customer
      description: Retrieves details of a specific customer by ID.
      operationId: getCustomer
      parameters:
        - in: path
          name: Id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Customer details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          description: Customer not found

    put:
      tags:
        - Customers
      summary: Update a customers's details
      description: Updates a customers's details, including their role.
      operationId: updateUser
      parameters:
        - in: path
          name: Id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '200':
          description: Customer updated successfully
        '400':
          description: Invalid input
        '404':
          description: Customer not found

    delete:
      tags:
        - Customers
      summary: Remove a customer
      description: Removes a customer from the POS system.
      operationId: deleteCustomer
      parameters:
        - in: path
          name: Id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Customer removed successfully
        '404':
          description: Customer not found

  /payments:
    post:
      tags:
        - Payments
      summary: Create a new payment record
      description: Allows the creation of a new payment.
      operationId: createPayment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRequest'
      responses:
        '201':
          description: Successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentDetail'
        '400':
          description: Invalid input

    get:
      tags:
        - Payments
      summary: List all payment records
      description: Retrieves a list of all payments.
      operationId: listPayments
      parameters:
        - in: query
          name: orderId
          schema:
           type: integer
           format: int64
        - in: query
          name: paymentType
          schema:
            type: string
          description: Filter by payment type (CARD, CASH, COUPON)
        - in: query
          name: paymentState
          schema:
            type: string
          description: Filter by payment state (NULL, PENDING, PARTIALLY_PAID, PAID)
        - in: query
          name: dateRangeStart
          schema:
            type: string
            format: date-time
          description: Filter by payment date range
        - in: query
          name: dateRangeEnd
          schema:
            type: string
            format: date-time
          description: Filter by payment date range
      responses:
        '200':
          description: A list of payments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentDetail'

  /payments/{paymentId}:
    get:
      tags:
        - Payments
      summary: Retrieve details of a specific payment
      description: Retrieves details of a specific payment by ID.
      operationId: getPaymentDetail
      parameters:
        - in: path
          name: paymentId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Payment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentDetail'
        '404':
          description: Payment not found

   
    delete:
      tags:
        - Payments
      summary: Delete a payment record
      description: Deletes a specific payment record by ID.
      operationId: deletePayment
      parameters:
        - in: path
          name: paymentId
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successfully deleted
        '404':
          description: Payment not found

  /products:
    get:
      tags:
        - Product
      summary: List all products in the inventory
      description: Retrieves a list of all products in the inventory.
      operationId: listAllProducts
      parameters:
        - in: query
          name: elementsRangeStart
          schema:
            type: integer
            format: int64
          description: First element to show (pagination)
        - in: query
          name: elementsRangeEnd
          schema:
            type: string
          description: Last element to show (pagination)
        - in: query
          name: priceRangeStart
          schema:
            type: integer
            format: int64
          description: Filter by price range (from 0, from 50 etc.)
        - in: query
          name: priceRangeEnd
          schema:
            type: integer
            format: int64
          description: Filter by price range (to 50, to 100 etc.)
        - in: query
          name: quantity
          schema:
            type: integer
            format: int64
          description: Filter by stock level
      responses:
        '200':
          description: A list of products in Inventory
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      tags:
        - Product
      summary: Add a new product to the inventory
      description: Allows the addition of a new product to the inventory.
      operationId: addProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProduct'
      responses:
        '201':
          description: Product successfully added to the inventory
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input

  /products/{productId}:
    get:
      tags:
        - Product
      summary: View specific product details
      description: Retrieves details of a specific product by ID.
      operationId: getProduct
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Detailed product information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
    put:
      tags:
        - Product
      summary: Update details of an existing product
      description: Updates details of an existing product by ID.
      operationId: updateProduct
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product details successfully updated
        '400':
          description: Invalid input
        '404':
          description: Product not found
    delete:
      tags:
        - Product
      summary: Remove a product from the inventory
      description: Deletes a specific product from the inventory by ID.
      operationId: deleteProduct
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Product successfully deleted
        '404':
          description: Product not found
    # patch:
    #   tags:
    #     - Product
    #   summary: Update specific attributes of a product
    #   description: Updates specific attributes of a product by ID.
    #   operationId: patchProduct
    #   parameters:
    #     - in: path
    #       name: productId
    #       required: true
    #       schema:
    #         type: integer
    #         format: int64
    #   requestBody:
    #     required: true
    #     content:
    #       application/json:
    #         schema:
    #           $ref: '#/components/schemas/Product'
    #   responses:
    #     '200':
    #       description: Specific product attributes updated
    #     '400':
    #       description: Invalid input
    #     '404':
    #       description: Product not found

  /orders:
    post:
      tags:
        - Orders
      summary: Create a new order
      description: Endpoint to create a new order.
      operationId: createOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrder'
      responses:
        '201':
          description: Order successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input

    get:
      tags:
        - Orders
      summary: Retrieve a list of all orders
      description: Endpoint to retrieve all orders with optional filters.
      operationId: listOrders
      responses:
        '200':
          description: A list of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'

  /orders/{orderID}:
    get:
      tags:
        - Orders
      summary: Retrieve details of a specific order
      description: Endpoint to retrieve details of a specific order by ID.
      operationId: getOrder
      parameters:
        - in: path
          name: orderID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Detailed order data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found

    put:
      tags:
        - Orders
      summary: Update an existing order
      description: Endpoint to update an existing order by ID.
      operationId: updateOrder
      parameters:
        - in: path
          name: orderID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Order successfully updated
        '400':
          description: Invalid input
        '404':
          description: Order not found

    delete:
      tags:
        - Orders
      summary: Delete an existing order
      description: Endpoint to delete an existing order by ID.
      operationId: deleteOrder
      parameters:
        - in: path
          name: orderID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Order successfully deleted
        '404':
          description: Order not found

  

  /discounts:
    get:
      tags:
        - Discount
      summary: Retrieve all available discounts
      description: Endpoint to retrieve all available discounts with optional query parameters for refined searching.
      operationId: listDiscounts
      responses:
        '200':
          description: A list of available discounts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Discount'

  /discounts/{discountCode}:
    get:
      tags:
        - Discount
      summary: Retrieve details of a specific discount
      description: Endpoint to retrieve details of a specific discount by code.
      operationId: getDiscount
      parameters:
        - in: path
          name: discountCode
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Detailed discount data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplyDiscount'
        '404':
          description: Discount not found

  /orders/{orderID}/items:
    post:
      tags:
        - Orders
      summary: Add an item to an order
      description: Endpoint to add a product to an order by ID.
      operationId: addItemToOrder
      parameters:
        - in: path
          name: orderID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '200':
          description: Product added to order
        '400':
          description: Invalid input
        '404':
          description: Order not found

  /orders/{orderID}/items/{itemID}:
    delete:
      tags:
        - Orders
      summary: Remove an item from an order
      description: Endpoint to remove an item from an order by ID.
      operationId: removeItemFromOrder
      parameters:
        - in: path
          name: orderID
          required: true
          schema:
            type: integer
            format: int64
        - in: path
          name: category
          required: true
          schema:
            type: string
            enum: ['PRODUCT', 'SERVICE']
        - in: path 
          name: itemID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Item removed from order
        '404':
          description: Order or item not found

    put:
      tags:
        - Orders
      summary: Modify the quantity of a item in an order
      description: Endpoint to modify the quantity of an item in an order by ID.
      operationId: modifyItemQuantityInOrder
      parameters:
        - in: path
          name: orderID
          required: true
          schema:
            type: integer
            format: int64
        - in: path
          name: category
          required: true
          schema:
            type: string
            enum: ['PRODUCT', 'SERVICE']
        - in: path 
          name: itemID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '200':
          description: Item quantity modified
        '400':
          description: Invalid input
        '404':
          description: Order or item not found


  /services:
    post:
      tags:
        - Service
      summary: Create a new service offering
      description: Creates a new service offering in the POS system.
      operationId: createService
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateService'
      responses:
        '201':
          description: Service created successfully
        '400':
          description: Invalid input

    get:
      tags:
        - Service
      summary: Retrieve a list of all services offered
      description: Retrieves a list of all services offered by the POS system.
      operationId: listServices
      responses:
        '200':
          description: A list of services
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'

  /services/{serviceId}:
    put:
      tags:
        - Service
      summary: Update details of an existing service
      description: Updates details of an existing service offering.
      operationId: updateService
      parameters:
        - in: path
          name: serviceId
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        '200':
          description: Service updated successfully
        '400':
          description: Invalid input
        '404':
          description: Service not found

    delete:
      tags:
        - Service
      summary: Remove a service offering
      description: Deletes a specific service offering from the POS system.
      operationId: deleteService
      parameters:
        - in: path
          name: serviceId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Service deleted successfully
        '404':
          description: Service not found

    get:
      tags:
        - Service
      summary: Retrieve detailed information about a specific service
      description: Retrieves detailed information about a specific service, including availability and pricing.
      operationId: getServiceDetails
      parameters:
        - in: path
          name: serviceId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Detailed service information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '404':
          description: Service not found

  /services/{serviceId}/bookings:
    post:
      tags:
        - Booking
      summary: Create a new booking for a service
      description: Schedules a new booking for a specified service.
      operationId: createServiceBooking
      parameters:
        - in: path
          name: serviceId
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateServiceBooking'
      responses:
        '201':
          description: Booking created
        '400':
          description: Invalid input

  /services/bookings:
    get:
      tags:
        - Booking
      summary: List all bookings for a specific service within a time range
      description: Retrieves a list of all bookings for a specific service, optionally filtered by a time range.
      operationId: listServiceBookings
      parameters:
        - in: query
          name: serviceId
          schema:
            type: integer
            format: int64
          description: Unique identifier of the service
        - in: query
          name: customerId
          schema:
            type: integer
            format: int64
          description: Unique identifier of the customer
        - in: query
          name: employeeId
          schema:
            type: integer
            format: int64
          description: Unique identifier of the employee
        - in: query
          name: availability
          schema:
            type: boolean
            format: boolean
          description: Filter by availability
        - in: query
          name: startTime
          required: false
          schema:
            type: string
            format: date-time
          description: Start time for filtering bookings (inclusive)
        - in: query
          name: endTime
          required: false
          schema:
            type: string
            format: date-time
          description: End time for filtering bookings (inclusive)
      responses:
        '200':
          description: List of service bookings within the specified time range
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceBooking'
        '404':
          description: Service not found


  /services/bookings/{bookingId}:
    get:
      tags:
        - Booking
      summary: Retrieve details of a specific booking
      description: Retrieves details of a specific service booking.
      operationId: getServiceBookingDetails
      parameters:
        - in: path
          name: bookingId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Booking details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceBooking'
        '404':
          description: Booking not found

    put:
      tags:
        - Booking
      summary: Update a service booking
      description: Updates details of an existing service booking.
      operationId: updateServiceBooking
      parameters:
        - in: path
          name: bookingId
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceBooking'
      responses:
        '200':
          description: Booking updated
        '400':
          description: Invalid input
        '404':
          description: Booking not found

    delete:
      tags:
        - Booking
      summary: Cancel a service booking
      description: Cancels a specific service booking.
      operationId: cancelServiceBooking
      parameters:
        - in: path
          name: bookingId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Booking cancelled
        '404':
          description: Booking not found

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Payment:
      type: object
      properties:
        paymentId:
          type: integer
          format: int64
        transactionId:
          type: integer
          format: int64
        orderId:
          type: integer
          format: int64
        amount:
          $ref: '#/components/schemas/Price'
        method:
          type: string
          enum: ['cash','card']
      required:
        - transactionId
        - amount
        - method

    CreateOrder:
      type: object
      properties:
        customer_id:
          type: integer
          format: in64
        employee_id: 
          type: integer
          format: int64
        discount_id:
          type: integer
          format: int64
        tips: 
          type: number
          format: float 
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item'
        status:
          type: string
          enum: ['DONE', 'IN_PROCESS', 'FREEZED']
      required:
        - status
        - employee_id

    Order:
      type: object
      properties:
        orderId:
          type: integer
          format: int64
        customer_id:
          type: integer
          format: in64
        employee_id: 
          type: integer
          format: int64
        discount_id:
          type: integer
          format: int64
        tips: 
          type: number
          format: float 
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item'
        status:
          type: string
          enum: ['DONE', 'IN_PROCESS', 'FREEZED']
      required:
        - status
        - employee_id

    Item:
      type: object
      properties:
        category:
            type: string
            enum: ['PRODUCT', 'SERVICE']
        itemId:
          type: integer
          format: int64
        name:
          type: string
        price:
          $ref: '#/components/schemas/Price'
        quantity:
          type: integer
          format: int64
        details: 
          type: string
      required:
        - name
        - price
        - quantity

    Discount:
      type: object
      properties:
        discountId:
          type: integer
          format: int64
        code: 
          type: string
        percentage:
          type: number
          format: float
      required:
        - discountId
        - percentage

    ApplyDiscount:
      type: object
      properties:
        discountId:
          type: integer
          format: int64
        percentage:
          type: number
          format: float
      required:
        - discountId
        - percentage

    CodeCredentials:
      type: object
      properties:
        code:
          type: string
      required:
        - code

    LoginCredentials:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password

    SessionToken:
      type: object
      properties:
        token:
          type: string
      required:
        - token


    WorkerCodeResponse:
      type: object
      properties:
        code:
          type: string
          description: The unique access code for the worker or manager.
        role:
          type: string
          description: The role associated with the code.
      required:
        - code
        - role

    CreateEmployee:
      type: object
      properties:
        name:
          type: string
        role:
          type: integer
          format: int64
      required:
        - name
        - role

    Employee:
      type: object
      properties:
        name:
          type: string
        role:
          type: integer
          format: int64
      required:
        - name
        - role

    EmployeeRoleUpdate:
      type: object
      properties:
        role:
          type: integer
          format: int64 
      required:
        - role


    # Tenant:
    #   type: object
    #   properties:
    #     userId:
    #       type: integer
    #       format: int64
    #     name:
    #       type: string
    #     email:
    #       type: string
    #     role:
    #       type: integer
    #       format: int64
    #     phone:
    #       type: string
    #   required:
    #     - name
    #     - email
    #     - role
    #     - phone


    CreateCustomer:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        phone: 
          type: string 
        loyalty:
          type: integer
          format: int64
      required:
        - name

    Customer:
      type: object
      properties:
        customer_id:
          type: integer
          format: int64
        name:
          type: string
        email:
          type: string
        phone: 
          type: string 
        loyalty:
          type: integer
          format: int64
      required:
        - name

    Role:
      type: object
      properties:
        roleId:
          type: integer
          format: int64
        roleName:
          type: string
        permissions:
          type: string
          enum: ['Administrtator', 'LoyaltyAndInventoryManager', 'LoyaltyManager', 'InventoryManager', 'Employee']
      required:
        - roleName
        - permissions
    
    
    ServiceDetails:
      type: object
      properties:
        serviceId:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        price:
          $ref: '#/components/schemas/Price'
        availability:
          type: boolean
      required:
        - name
        - description
        - price
        - availability

    Price:
      type: object
      properties:
        amount:
          type: number
          format: float
        currency:
          type: string
          enum: ['EUR', 'GBP', 'PLN']

    PaymentRequest:
      type: object
      properties:
        orderId:
          type: integer
          format: int64
        paymentType:
          type: string
          enum: ['CARD', 'CASH']
        paymentState:
          type: string
          enum: ['UNPAID', 'PENDING', 'PARTIALLY_PAID', 'PAID']
        price:
          $ref: '#/components/schemas/Price'
        

    PaymentDetail:
      type: object
      properties:
        orderId:
          type: integer
          format: int64
        paymentId:
          type: string
        paymentType:
          type: string
          enum: ['CARD', 'CASH']
        paymentState:
          type: string
          enum: ['UNPAID', 'PENDING', 'PARTIALLY_PAID', 'PAID']
        price:
          $ref: '#/components/schemas/Price'
        date:
          type: string
          format: date-time

    CreateProduct:
      type: object
      properties:
        name:
          type: string
        price:
          $ref: '#/components/schemas/Price'
        quantity:
          type: integer


    Product:
      type: object
      properties:
        productId:
          type: integer
          format: int64
        name:
          type: string
        price:
          $ref: '#/components/schemas/Price'
        quantity:
          type: integer



    CreateService:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          $ref: '#/components/schemas/Price'
      required:
        - name
        - description
        - price


    Service:
      type: object
      properties:
        serviceId:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        price:
          $ref: '#/components/schemas/Price'
      required:
        - name
        - description
        - price


    CreateServiceBooking:
      type: object
      properties:
        customerId:
          type: integer
          format: int64
        employeeId:
          type: integer
          format: int64
        bookingTimeStart:
          type: string
          format: date-time
        bookingTimeEnd:
          type: string
          format: date-time
        status:
          type: string
          enum: ['SCHEDULED', 'COMPLETED', 'CANCELLED']
      required:
        - employeeId
        - bookingTime

    ServiceBooking:
      type: object
      properties:
        bookingId:
          type: integer
          format: int64
        serviceId:
          type: integer
          format: int64
        customerId:
          type: integer
          format: int64
        employeeId:
          type: integer
          format: int64
        bookingTimeStart:
          type: string
          format: date-time
        bookingTimeEnd:
          type: string
          format: date-time
        status:
          type: string
          enum: ['SCHEDULED', 'COMPLETED', 'CANCELLED']
      required:
        - serviceId
        - customerId
        - employeeId
        - bookingTime