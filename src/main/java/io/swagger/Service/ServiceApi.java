/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.51).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.Service;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-12-25T04:32:42.344389+02:00[Europe/Vilnius]")
@Validated
public interface ServiceApi {

    @Operation(summary = "Create a new service offering", description = "Creates a new service offering in the POS system.", security = {
            @SecurityRequirement(name = "BearerAuth") }, tags = { "Service" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "201", description = "Service created successfully"),

            @ApiResponse(responseCode = "400", description = "Invalid input") })
    @RequestMapping(value = "/service", consumes = { "application/json" }, method = RequestMethod.POST)
    ResponseEntity<Void> createService(
            @Parameter(in = ParameterIn.DEFAULT, description = "", required = true, schema = @Schema()) @Valid @RequestBody CreateService body);

    @Operation(summary = "Create a new booking for a service", description = "Schedules a new booking for a specified service.", security = {
            @SecurityRequirement(name = "BearerAuth") }, tags = { "Booking" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "201", description = "Booking created"),

            @ApiResponse(responseCode = "400", description = "Invalid input") })
    @RequestMapping(value = "/service/{serviceId}/booking", consumes = {
            "application/json" }, method = RequestMethod.POST)
    ResponseEntity<Void> createServiceBooking(
            @Parameter(in = ParameterIn.PATH, description = "", required = true, schema = @Schema()) @PathVariable("serviceId") Long serviceId,
            @Parameter(in = ParameterIn.DEFAULT, description = "", required = true, schema = @Schema()) @Valid @RequestBody CreateServiceBooking body);

    @Operation(summary = "Remove a service offering", description = "Deletes a specific service offering from the POS system.", security = {
            @SecurityRequirement(name = "BearerAuth") }, tags = { "Service" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "204", description = "Service deleted successfully"),

            @ApiResponse(responseCode = "404", description = "Service not found") })
    @RequestMapping(value = "/service/{serviceId}", method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteService(
            @Parameter(in = ParameterIn.PATH, description = "", required = true, schema = @Schema()) @PathVariable("serviceId") Long serviceId);

    @Operation(summary = "Retrieve detailed information about a specific service", description = "Retrieves detailed information about a specific service, including availability and pricing.", security = {
            @SecurityRequirement(name = "BearerAuth") }, tags = { "Service" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Detailed service information", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Service.class))),

            @ApiResponse(responseCode = "404", description = "Service not found") })
    @RequestMapping(value = "/service/{serviceId}", produces = { "application/json" }, method = RequestMethod.GET)
    ResponseEntity<Service> getServiceDetails(
            @Parameter(in = ParameterIn.PATH, description = "", required = true, schema = @Schema()) @PathVariable("serviceId") Long serviceId);

    @Operation(summary = "Update details of an existing service", description = "Updates details of an existing service offering.", security = {
            @SecurityRequirement(name = "BearerAuth") }, tags = { "Service" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Service updated successfully"),

            @ApiResponse(responseCode = "400", description = "Invalid input"),

            @ApiResponse(responseCode = "404", description = "Service not found") })
    @RequestMapping(value = "/service/{serviceId}", consumes = { "application/json" }, method = RequestMethod.PUT)
    ResponseEntity<Void> updateService(
            @Parameter(in = ParameterIn.PATH, description = "", required = true, schema = @Schema()) @PathVariable("serviceId") Long serviceId,
            @Parameter(in = ParameterIn.DEFAULT, description = "", required = true, schema = @Schema()) @Valid @RequestBody Service body);

}
