/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.51).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.AuthLogoutroleBody;
import io.swagger.model.CodeCredentials;
import io.swagger.model.CodeGenerateBody;
import io.swagger.model.InlineResponse200;
import io.swagger.model.InlineResponse2001;
import io.swagger.model.LoginCredentials;
import io.swagger.model.SessionToken;
import io.swagger.model.WorkerCodeResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-12-10T17:29:46.806586+02:00[Europe/Vilnius]")
@Validated
public interface AuthApi {

    @Operation(summary = "Initial code creation for manager", description = "Allows the manager to create a unique code granting managerial permissions.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Auth" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Managerial code created successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse200.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized or invalid credentials") })
    @RequestMapping(value = "/auth/manager-initial-code",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<InlineResponse200> createManagerInitialCode(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody LoginCredentials body
);


    @Operation(summary = "Generate a new access code", description = "Generates a new access code for a user and provides the role associated with this code.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Auth" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Access code and role generated successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation = WorkerCodeResponse.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized or invalid user ID") })
    @RequestMapping(value = "/auth/code/generate",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<WorkerCodeResponse> generateCode(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody CodeGenerateBody body
);


    @Operation(summary = "User login", description = "Authenticates the user (tenant/manager) and issues a JWT token.", tags={ "Auth" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successfully logged in, JWT token issued", content = @Content(mediaType = "application/json", schema = @Schema(implementation = SessionToken.class))),
        
        @ApiResponse(responseCode = "401", description = "Authentication failed") })
    @RequestMapping(value = "/auth/login",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<SessionToken> loginUser(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody LoginCredentials body
);


    @Operation(summary = "Code-based login", description = "Logs in a user by their unique code and issues a role-specific JWT token.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Auth" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successfully logged in with code, role-specific JWT token issued", content = @Content(mediaType = "application/json", schema = @Schema(implementation = SessionToken.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized or invalid code") })
    @RequestMapping(value = "/auth/code-login",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<SessionToken> loginWithCode(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody CodeCredentials body
);


    @Operation(summary = "Logout from role and return to tenant session", description = "Logs out the user from their role-specific session and returns the original tenant session token.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Auth" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successfully logged out from role, tenant token returned", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse2001.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized or invalid role token") })
    @RequestMapping(value = "/auth/logout-role",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<InlineResponse2001> logoutFromRole(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody AuthLogoutroleBody body
);


    @Operation(summary = "User logout", description = "Logs out the user and invalidates their session token.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Auth" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Successfully logged out") })
    @RequestMapping(value = "/auth/logout",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> logoutUser(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody SessionToken body
);

}

