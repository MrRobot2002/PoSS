/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.51).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import org.threeten.bp.OffsetDateTime;
import io.swagger.model.Service;
import io.swagger.model.ServiceBooking;
import io.swagger.model.ServiceDetails;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-12-10T17:52:19.390156+02:00[Europe/Vilnius]")
@Validated
public interface ServicesApi {

    @Operation(summary = "Cancel a service booking", description = "Cancels a specific service booking.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Booking cancelled"),
        
        @ApiResponse(responseCode = "404", description = "Booking not found") })
    @RequestMapping(value = "/services/bookings/{bookingId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> cancelServiceBooking(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("bookingId") Long bookingId
);


    @Operation(summary = "Create a new service offering", description = "Creates a new service offering in the POS system.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Service created successfully"),
        
        @ApiResponse(responseCode = "400", description = "Invalid input") })
    @RequestMapping(value = "/services",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> createService(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Service body
);


    @Operation(summary = "Create a new booking for a service", description = "Schedules a new booking for a specified service.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Booking created"),
        
        @ApiResponse(responseCode = "400", description = "Invalid input") })
    @RequestMapping(value = "/services/{serviceId}/bookings",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> createServiceBooking(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("serviceId") Long serviceId
, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody ServiceBooking body
);


    @Operation(summary = "Remove a service offering", description = "Deletes a specific service offering from the POS system.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Service deleted successfully"),
        
        @ApiResponse(responseCode = "404", description = "Service not found") })
    @RequestMapping(value = "/services/{serviceId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteService(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("serviceId") Long serviceId
);


    @Operation(summary = "Retrieve bookings for a specific customer", description = "Lists all service bookings for a given customer.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "List of bookings for the customer", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ServiceBooking.class)))),
        
        @ApiResponse(responseCode = "404", description = "Customer not found or no bookings for the customer") })
    @RequestMapping(value = "/services/bookings/customer",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ServiceBooking>> getCustomerBookings(@NotNull @Parameter(in = ParameterIn.QUERY, description = "Unique identifier of the customer" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "customerId", required = true) Long customerId
);


    @Operation(summary = "Retrieve bookings for a specific employee", description = "Lists all service bookings handled by a given employee.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "List of bookings handled by the employee", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ServiceBooking.class)))),
        
        @ApiResponse(responseCode = "404", description = "Employee not found or no bookings handled by the employee") })
    @RequestMapping(value = "/services/bookings/employee",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ServiceBooking>> getEmployeeBookings(@NotNull @Parameter(in = ParameterIn.QUERY, description = "Unique identifier of the employee" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "employeeId", required = true) Long employeeId
);


    @Operation(summary = "Retrieve details of a specific booking", description = "Retrieves details of a specific service booking.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Booking details", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ServiceBooking.class))),
        
        @ApiResponse(responseCode = "404", description = "Booking not found") })
    @RequestMapping(value = "/services/bookings/{bookingId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ServiceBooking> getServiceBookingDetails(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("bookingId") Long bookingId
);


    @Operation(summary = "Retrieve detailed information about a specific service", description = "Retrieves detailed information about a specific service, including availability and pricing.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Detailed service information", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ServiceDetails.class))),
        
        @ApiResponse(responseCode = "404", description = "Service not found") })
    @RequestMapping(value = "/services/{serviceId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ServiceDetails> getServiceDetails(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("serviceId") Long serviceId
);


    @Operation(summary = "List all bookings for a specific service within a time range", description = "Retrieves a list of all bookings for a specific service, optionally filtered by a time range.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "List of service bookings within the specified time range", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ServiceBooking.class)))),
        
        @ApiResponse(responseCode = "404", description = "Service not found") })
    @RequestMapping(value = "/services/bookings",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ServiceBooking>> listServiceBookings(@NotNull @Parameter(in = ParameterIn.QUERY, description = "Unique identifier of the service" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "serviceId", required = true) Long serviceId
, @Parameter(in = ParameterIn.QUERY, description = "Start time for filtering bookings (inclusive)" ,schema=@Schema()) @Valid @RequestParam(value = "startTime", required = false) OffsetDateTime startTime
, @Parameter(in = ParameterIn.QUERY, description = "End time for filtering bookings (inclusive)" ,schema=@Schema()) @Valid @RequestParam(value = "endTime", required = false) OffsetDateTime endTime
);


    @Operation(summary = "Retrieve a list of all services offered", description = "Retrieves a list of all services offered by the POS system.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A list of services", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Service.class)))) })
    @RequestMapping(value = "/services",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Service>> listServices();


    @Operation(summary = "Update details of an existing service", description = "Updates details of an existing service offering.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Service updated successfully"),
        
        @ApiResponse(responseCode = "400", description = "Invalid input"),
        
        @ApiResponse(responseCode = "404", description = "Service not found") })
    @RequestMapping(value = "/services/{serviceId}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateService(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("serviceId") Long serviceId
, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Service body
);


    @Operation(summary = "Update a service booking", description = "Updates details of an existing service booking.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Booking updated"),
        
        @ApiResponse(responseCode = "400", description = "Invalid input"),
        
        @ApiResponse(responseCode = "404", description = "Booking not found") })
    @RequestMapping(value = "/services/bookings/{bookingId}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateServiceBooking(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("bookingId") Long bookingId
, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody ServiceBooking body
);

}

