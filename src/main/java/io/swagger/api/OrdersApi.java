/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.51).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Discount;
import io.swagger.model.Order;
import io.swagger.model.OrderItem;
import io.swagger.model.Payment;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-12-07T03:52:36.392108+02:00[Europe/Vilnius]")
@Validated
public interface OrdersApi {

    @Operation(summary = "Add a product to an order", description = "Endpoint to add a product to an order by ID.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Orders" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Product added to order"),
        
        @ApiResponse(responseCode = "400", description = "Invalid input"),
        
        @ApiResponse(responseCode = "404", description = "Order not found") })
    @RequestMapping(value = "/orders/{orderID}/items",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> addProductToOrder(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("orderID") Long orderID
, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody OrderItem body
);


    @Operation(summary = "Apply a discount to an order", description = "Endpoint to apply a discount to an order by ID.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Orders" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Discount applied to order"),
        
        @ApiResponse(responseCode = "400", description = "Invalid input"),
        
        @ApiResponse(responseCode = "404", description = "Order not found") })
    @RequestMapping(value = "/orders/{orderID}/discounts",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> applyDiscount(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("orderID") Long orderID
, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Discount body
);


    @Operation(summary = "Create a new order", description = "Endpoint to create a new order.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Orders" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Order successfully created", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Order.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid input") })
    @RequestMapping(value = "/orders",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Order> createOrder(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Order body
);


    @Operation(summary = "Delete an existing order", description = "Endpoint to delete an existing order by ID.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Orders" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Order successfully deleted"),
        
        @ApiResponse(responseCode = "404", description = "Order not found") })
    @RequestMapping(value = "/orders/{orderID}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteOrder(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("orderID") Long orderID
);


    @Operation(summary = "Retrieve details of a specific order", description = "Endpoint to retrieve details of a specific order by ID.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Orders" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Detailed order data", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Order.class))),
        
        @ApiResponse(responseCode = "404", description = "Order not found") })
    @RequestMapping(value = "/orders/{orderID}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Order> getOrder(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("orderID") Long orderID
);


    @Operation(summary = "Retrieve a list of all orders", description = "Endpoint to retrieve all orders with optional filters.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Orders" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A list of orders", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Order.class)))) })
    @RequestMapping(value = "/orders",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Order>> listOrders(@Parameter(in = ParameterIn.QUERY, description = "Optional category filer for Orders." ,schema=@Schema()) @Valid @RequestParam(value = "category", required = false) String category
);


    @Operation(summary = "Modify the quantity of a product in an order", description = "Endpoint to modify the quantity of a product in an order by ID.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Orders" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Product quantity modified"),
        
        @ApiResponse(responseCode = "400", description = "Invalid input"),
        
        @ApiResponse(responseCode = "404", description = "Order or product not found") })
    @RequestMapping(value = "/orders/{orderID}/items/{productID}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> modifyProductQuantityInOrder(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("orderID") Long orderID
, @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("productID") Long productID
, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody OrderItem body
);


    @Operation(summary = "Process payment for an order", description = "Endpoint to process payment for an order by ID.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Payments" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Payment processed for order"),
        
        @ApiResponse(responseCode = "400", description = "Invalid input"),
        
        @ApiResponse(responseCode = "404", description = "Order not found") })
    @RequestMapping(value = "/orders/{orderID}/pay",
        consumes = { "application/json" }, 
        method = RequestMethod.PATCH)
    ResponseEntity<Void> payForOrder(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("orderID") Long orderID
, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Payment body
);


    @Operation(summary = "Remove a product from an order", description = "Endpoint to remove a product from an order by ID.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Orders" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Product removed from order"),
        
        @ApiResponse(responseCode = "404", description = "Order or product not found") })
    @RequestMapping(value = "/orders/{orderID}/items/{productID}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> removeProductFromOrder(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("orderID") Long orderID
, @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("productID") Long productID
);


    @Operation(summary = "Update an existing order", description = "Endpoint to update an existing order by ID.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Orders" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Order successfully updated"),
        
        @ApiResponse(responseCode = "400", description = "Invalid input"),
        
        @ApiResponse(responseCode = "404", description = "Order not found") })
    @RequestMapping(value = "/orders/{orderID}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateOrder(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("orderID") Long orderID
, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Order body
);

}

