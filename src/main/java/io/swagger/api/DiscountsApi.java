/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.51).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Discount;
import org.threeten.bp.LocalDate;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-12-07T03:52:36.392108+02:00[Europe/Vilnius]")
@Validated
public interface DiscountsApi {

    @Operation(summary = "Retrieve details of a specific discount", description = "Endpoint to retrieve details of a specific discount by code.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Orders" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Detailed discount data", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Discount.class))),
        
        @ApiResponse(responseCode = "404", description = "Discount not found") })
    @RequestMapping(value = "/discounts/{discountCode}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Discount> getDiscount(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("discountCode") String discountCode
);


    @Operation(summary = "Retrieve all available discounts", description = "Endpoint to retrieve all available discounts with optional query parameters for refined searching.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Orders" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A list of available discounts", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Discount.class)))) })
    @RequestMapping(value = "/discounts",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Discount>> listDiscounts(@Parameter(in = ParameterIn.QUERY, description = "Filter discounts by category" ,schema=@Schema()) @Valid @RequestParam(value = "category", required = false) String category
, @Parameter(in = ParameterIn.QUERY, description = "Filter discounts by minimum discount rate" ,schema=@Schema()) @Valid @RequestParam(value = "min_discount", required = false) Float minDiscount
, @Parameter(in = ParameterIn.QUERY, description = "Filter discounts by maximum discount rate" ,schema=@Schema()) @Valid @RequestParam(value = "max_discount", required = false) Float maxDiscount
, @Parameter(in = ParameterIn.QUERY, description = "Filter discounts that expire before a certain date" ,schema=@Schema()) @Valid @RequestParam(value = "expiration_date", required = false) LocalDate expirationDate
, @Parameter(in = ParameterIn.QUERY, description = "Filter discounts based on whether they are currently active" ,schema=@Schema()) @Valid @RequestParam(value = "active", required = false) Boolean active
);

}

