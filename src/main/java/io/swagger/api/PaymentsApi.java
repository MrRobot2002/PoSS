/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.51).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Payment;
import io.swagger.model.PaymentDetail;
import io.swagger.model.PaymentRequest;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-12-10T17:52:19.390156+02:00[Europe/Vilnius]")
@Validated
public interface PaymentsApi {

    @Operation(summary = "Create a new payment record", description = "Allows the creation of a new payment.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Payments" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Successfully created", content = @Content(mediaType = "application/json", schema = @Schema(implementation = PaymentDetail.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid input") })
    @RequestMapping(value = "/payments",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<PaymentDetail> createPayment(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody PaymentRequest body
);


    @Operation(summary = "Delete a payment record", description = "Deletes a specific payment record by ID.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Payments" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Successfully deleted"),
        
        @ApiResponse(responseCode = "404", description = "Payment not found") })
    @RequestMapping(value = "/payments/{paymentId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deletePayment(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("paymentId") String paymentId
);


    @Operation(summary = "Retrieve details of a specific payment", description = "Retrieves details of a specific payment by ID.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Payments" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Payment details", content = @Content(mediaType = "application/json", schema = @Schema(implementation = PaymentDetail.class))),
        
        @ApiResponse(responseCode = "404", description = "Payment not found") })
    @RequestMapping(value = "/payments/{paymentId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<PaymentDetail> getPaymentDetail(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("paymentId") String paymentId
);


    @Operation(summary = "List all payment records", description = "Retrieves a list of all payments.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Payments" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A list of payments", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PaymentDetail.class)))) })
    @RequestMapping(value = "/payments",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<PaymentDetail>> listPayments(@Parameter(in = ParameterIn.QUERY, description = "Filter by payment type (CARD, CASH, COUPON)" ,schema=@Schema()) @Valid @RequestParam(value = "paymentType", required = false) String paymentType
, @Parameter(in = ParameterIn.QUERY, description = "Filter by payment state (NULL, PENDING, PARTIALLY_PAID, PAID)" ,schema=@Schema()) @Valid @RequestParam(value = "paymentState", required = false) String paymentState
, @Parameter(in = ParameterIn.QUERY, description = "Filter by payment date range" ,schema=@Schema()) @Valid @RequestParam(value = "dateRange", required = false) String dateRange
);


    @Operation(summary = "Process payment for an order", description = "Endpoint to process payment for an order by ID.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Payments" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Payment processed for order"),
        
        @ApiResponse(responseCode = "400", description = "Invalid input"),
        
        @ApiResponse(responseCode = "404", description = "Order not found") })
    @RequestMapping(value = "/payments/{orderID}/pay",
        consumes = { "application/json" }, 
        method = RequestMethod.PATCH)
    ResponseEntity<Void> payForOrder(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("orderID") Long orderID
, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Payment body
);


    @Operation(summary = "Update a payment record", description = "Updates a specific payment record by ID.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Payments" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successfully updated"),
        
        @ApiResponse(responseCode = "400", description = "Invalid input"),
        
        @ApiResponse(responseCode = "404", description = "Payment not found") })
    @RequestMapping(value = "/payments/{paymentId}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updatePayment(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("paymentId") String paymentId
, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody PaymentRequest body
);

}

