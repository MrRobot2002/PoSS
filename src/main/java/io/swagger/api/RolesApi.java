/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.51).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Role;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-12-10T17:52:19.390156+02:00[Europe/Vilnius]")
@Validated
public interface RolesApi {

    @Operation(summary = "Create a new role", description = "Creates a new role with associated permissions.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Roles" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Role created successfully"),
        
        @ApiResponse(responseCode = "400", description = "Invalid input") })
    @RequestMapping(value = "/roles",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> createRole(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Role body
);


    @Operation(summary = "Delete a role", description = "Deletes a role from the system.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Roles" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Role deleted successfully"),
        
        @ApiResponse(responseCode = "404", description = "Role not found") })
    @RequestMapping(value = "/roles/{roleId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteRole(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("roleId") Long roleId
);


    @Operation(summary = "Retrieve details of a specific role", description = "Retrieves details of a specific role by ID, including permissions.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Roles" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Role details", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Role.class))),
        
        @ApiResponse(responseCode = "404", description = "Role not found") })
    @RequestMapping(value = "/roles/{roleId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Role> getRole(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("roleId") Long roleId
);


    @Operation(summary = "List all roles", description = "Retrieves a list of all roles.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Roles" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A list of roles", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Role.class)))) })
    @RequestMapping(value = "/roles",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Role>> listRoles(@Parameter(in = ParameterIn.QUERY, description = "Filter discounts by category" ,schema=@Schema()) @Valid @RequestParam(value = "category", required = false) String category
);


    @Operation(summary = "Update a specific role", description = "Updates a specific role, modifying its permissions as needed.", security = {
        @SecurityRequirement(name = "BearerAuth")    }, tags={ "Roles" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Role updated successfully"),
        
        @ApiResponse(responseCode = "400", description = "Invalid input"),
        
        @ApiResponse(responseCode = "404", description = "Role not found") })
    @RequestMapping(value = "/roles/{roleId}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateRole(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("roleId") Long roleId
, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Role body
);

}

